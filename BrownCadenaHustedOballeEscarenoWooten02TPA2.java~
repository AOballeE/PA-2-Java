import java.util.*;
import java.util.Scanner; //IMPORTING INPUT CAPTURE CLASS
import java.util.Calendar; // IMPORTING DATE AND TIME CAPUTURE CLASS


public class BrownCadenaHustedOballeEscarenoWooten02TPA2 
{
//Field declarations.
 static Scanner input = new Scanner(System.in); // to take user input
  
 static Calendar dateTime = Calendar.getInstance(); // to get calendar date and time
    
 static String hammockDesc = "", colorSelected = ""; // hammock desctiption and color selected strings
  
 static double price = 0.0; // price of individual units
  
 static boolean repeat = false;
  
 static String salesReceipt = String.format("%n%nSALES RECIPT" +
                                      "%n%nLAZY HAZY DAYS, INC." +
                                      "%nHuebner Oaks Mall" +
                                      "%nSan Antonio, TX" +
                                      "%n%nDate:  %tD" +
                                      "%nTime:  %tr%n", dateTime, dateTime);
  //Code default constructor.
  
  public static void main(String[] args)
  {
//Local variables
  int hammock = 0, // hammock choice
      quantity = 0, // hammock quantity
      color = 0, // hammock color
      iterations = 1; // total iterations
  
  char morePurchases = 'y';
  
  double itemTotal = 0.0, // item totals
         subtotal = 0.0,  // sub total for items
         discount = 0.0,  // discount based on subtotal
         discSubtotal = 0.0, // subtotal accounting for discount
         tax = 0.0, // tax at .0825
         total = 0.0, // total accounting for all variables
         discRate = 0.0;
  
  boolean printFinal = false;
  
    do
    {
      do
      {
       hammock = promptHammock();
       //input.nextInt();
         
        if(hammock < 1 || hammock > 3)
        {
           System.out.printf("You entered an invalid hammock choice. Enter 'Y' to re-enter your " +
                             "choice or 'N' to exit the program: ");
           morePurchases = input.next().toLowerCase().charAt(0);
        }//END insert close brace line comment        
        
      }while(morePurchases == 'y' && hammock < 1 || hammock > 3);
      
      if(morePurchases == 'y')
      {
        setHammockSizePrice(hammock);
        quantity = promptQuantity();
        
        do
        {
          color = promptColor();    
          //input.nextInt();
          if(color < 1 || color > 5)
          {
             System.out.printf("You entered an invalid color choice. Enter 'Y' to re-enter your " +
                               "choice of 'N' to exit the program: ");
             morePurchases = input.next().toLowerCase().charAt(0);
          }//END close brace line comment
          
        }while(morePurchases == 'y' && color < 1 || color > 5);  //Insert line comment for do-while close brace.
        
        if(morePurchases == 'y')
        {
          setHammockColor(color);
          itemTotal = quantity * price;
          subtotal += itemTotal;
        }//END Insert if line comment
      }//END Insert if line comment             
      
      if(morePurchases == 'y')
      {
         salesReceipt += String.format("%n%-24s %c %-13s %5s %,7d %4s %s%,14.2f", hammockDesc, '-', colorSelected, 
                                       " ", quantity, " ", iterations > 1 ? " " : "$", itemTotal);
         System.out.printf("%nDo you want to add another hammock? Enter 'Y' or 'N': ");
         morePurchases = input.next().toLowerCase().charAt(0);
        
        if(morePurchases == 'n')
        {
          printFinal = true;
        }//END Insert if line comment
        
      }//END Insert if line comment
      
      iterations += 1;        
      
    }while(morePurchases == 'y');  //END Insert if line comment
    
    if(subtotal >= 100000.00)
    {
       discRate = .035;
    }
    else
    {
      if(subtotal >= 50000.00)
      {
         discRate = .03;
      }
      else
      {
        if(subtotal >= 10000.00)
        {
           discRate = .025;
        }
        else
        {
          if(subtotal >= 5000)
          {
            discRate = .02;
          }
          else
          {
            discRate = 0.0;
          }//END if subtotal >= 5000 2% discount else discount is 0
        }//END if subtotal >= 10000 2.5% discount else subtotal >= 5000
      }//END if subtotal >= 50000 3% discount else subtotal >= 10000
    }//END if subtotal >= 100000 3.5% discount else subtotal >= 50000
    
    discount = discRate * subtotal;
    discSubtotal += subtotal - discount;
    tax = discSubtotal * .0825;
    total = discSubtotal + tax;    
    
    if(printFinal == true)
    {
      displaySalesReceipt(subtotal, discount, tax, total);
    }//END Insert if line comment
    
    System.exit(0);
  }//END main()
  
  //Code the remaining methods per the instructions in the PA instructions.
public static int promptHammock(){
    int hammock;
    do{
    System.out.printf("LAZY HAZY DAYS, INC.%n%n");
    System.out.printf("Our beautiful cotton hammocks sport a traditional look and are very comfortable.%n%n" +
                      "1. Small - 48 in. x 11ft. - Good for 1 person\t\t\t\t$100.00%n" + 
                      "2. Large - 55 in. x 13ft. - Good for 2 people\t\t\t\t$140.00%n" +
                      "3. Deluxe - 60 in. x 13ft. - Good for 2 or more people\t\t\t$175.00%n%n");
  
    System.out.printf("Enter your choice: "); //PROMPT 1
    repeat = !input.hasNextInt();
    hammock = input.nextInt();
    validateNumber();
  } while(repeat == true);
         
  return hammock;
  } // End of promptHammock
  
public static void setHammockSizePrice(int hammock){
  switch(hammock){
    case 1:
      hammockDesc = "Small - 48 in. x 11ft.";
      price = 100.00;
      break;
    case 2:
      hammockDesc = "Large - 55 in. x 13ft.";
      price = 140.00;
      break;
    case 3:  
      hammockDesc = "Deluxe - 60 in. x 13ft.";
      price = 175.00;
      break;
  }
  } // End of setHammocksSizePrice
  
public static int promptQuantity(){
  do{
    System.out.printf("%nEnter the quantity: "); //PROMPT 2
    repeat = !input.hasNextInt();
    validateNumber();
  } while(repeat == true);
  
  return input.nextInt();
  } // End of promptQuantity

public static int promptColor(){
  do{
    System.out.printf("%n1. Crimson Red%n" +
                      "2. Emerald Green%n" +
                      "3. Indigo Blue%n" +
                      "4. Natural%n" +
                      "5. Purple Haze%n%n");
    System.out.printf("Enter your choice of colors: %n"); //PROMPT 3
    repeat = !input.hasNextInt();
    validateNumber();
  } while(repeat == true);
  
  return input.nextInt();
  } // End of PromptColor

public static void setHammockColor(int color){
  switch(color){
    case 1:
      colorSelected = "Crimson Red";
      break;
    case 2:
      colorSelected = "Emerald Green";
      break;
    case 3:
      colorSelected = "Indigo Blue";
      break;
    case 4:
      colorSelected = "Natural";
      break;
    case 5:
      colorSelected = "Purple Haze";
      break;
    default:
      colorSelected = "Invalid color";
      System.out.printf("Invalid color choice!%n%n");
      break;
  }
  } // End of setHammockColor

public static void validateNumber(){
  if(repeat == true){
    input.next();
    System.out.printf("%nYou must enter a valid integer or floating-point value!%n");
  }
  } // End of validateNumber

public static void displaySalesReceipt(double subtotal, double discount, double tax, double total){
  salesReceipt += String.format(
                    "%n%n%52s %-6s $%,14.2f" +
                    "%n%52s %-7s %,14.2f" +
                    "%n%52s %-7s %,14.2f" +
                    "%n%n%52s %-6s $%,14.2f%n",
                    "SUBTOTAL:", "  ",
                    subtotal, "DISCOUNT:", "  ",
                    discount, "TAX @ 8.250%:",
                    "  ", tax, "TOTAL:", "  ", total);
 System.out.printf("%s",salesReceipt);
  } // End of displaySalesReceipt
}//END APPLICATION CLASS LastNameTeamMembersAlphaOrderSecNoPA2 